// Top-level build file where you can add configuration options common to all sub-projects/modules.

gradle.startParameter.excludedTaskNames.addAll(
        gradle.startParameter.taskNames.findAll {
            it.contains("testClasses")
        }
)

buildscript {
    ext {
        buildToolsVersion = "34.0.0"
        minSdkVersion = 23
        compileSdkVersion = 34
        targetSdkVersion = 34
        ndkVersion = "26.1.10909125"
        kotlinVersion = "1.9.24"
        kotlin_version = "1.9.24"
        androidXBrowser = "1.5.0"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin")
        classpath("io.hyperswitch:react-native-gradle-plugin:0.75.2.1")
    }
}

/*
plugins {
    id 'com.vanniktech.maven.publish' version "0.30.0"
}
*/

apply plugin: "io.hyperswitch.rootproject"
apply plugin: 'maven-publish'
//apply plugin: 'signing'

rootProject.allprojects {
    // apply plugin: 'com.vanniktech.maven.publish'
    repositories {
        google()
        mavenCentral()
        maven {
            url("$rootDir/maven/")
        }
        maven {
            url "https://jitpack.io"
        }
        maven {
            url 'https://x.klarnacdn.net/mobile-sdk/'
        }
    }
    /*
    afterEvaluate { project ->
        if (tasks.findByPath(':react-native-klarna-inapp-sdk:compileDebugUnitTestJavaWithJavac')) {
            tasks.findByPath(':react-native-klarna-inapp-sdk:compileDebugUnitTestJavaWithJavac').enabled = false
        }
        if (tasks.findByPath(':react-native-klarna-inapp-sdk:compileReleaseUnitTestJavaWithJavac')) {
            tasks.findByPath(':react-native-klarna-inapp-sdk:compileReleaseUnitTestJavaWithJavac').enabled = false
        }
        if (project.plugins.hasPlugin('com.android.library') && !excludedLibs.contains(project.name)) {
            println("PRO1 [$project]")

            mavenPublishing {
                // configure(new com.vanniktech.maven.publish.AndroidSingleVariantLibrary("release", false, false))

                publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.CENTRAL_PORTAL)
                signAllPublications()

                coordinates("io.hyperswitch.${project.name}", project.name, project.version)

                pom {
                    name = project.name
                    description = 'Your project description'
                    url = 'http://www.hyperswitch.io'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'ChiragKV-Juspay'
                            name = 'Chirag KV'
                            email = 'chirag.kv@juspay.in'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/juspay/hyperswitch-sdk-android.git'
                        developerConnection = 'scm:git:ssh://git@github.com:juspay/hyperswitch-sdk-android.git'
                        url = 'https://github.com/hyperswitch/hyperswitch-sdk-android'
                    }
                }
            }
        }
    }
     */
}

def runtimeDeps = [
        'react-native-code-push',
        'react-native-gesture-handler',
        'react-native-inappbrowser-reborn',
        'react-native-pager-view',
        'react-native-safe-area-context',
        'react-native-screens',
        'react-native-svg',
        'sentry_react-native',
]

def runtimeDepsExcluded = [
        'demo-app'
]

def runtimeDepsOptional = [
        'react-native-reanimated',
        'react-native-hyperswitch-kount',
        'react-native-hyperswitch-paypal',
        'react-native-klarna-inapp-sdk',
        'react-native-hyperswitch-scancard',
        'react-native-hyperswitch-netcetera-3ds',
]

def configurePomMetadata = { root ->
    root.appendNode('name', 'Hyperswitch SDK for Android')
    root.appendNode('description', 'This is the Hyperswitch SDK for Android, providing seamless integration with the Hyperswitch platform.')
    root.appendNode('url', 'http://www.hyperswitch.io')

    def licenseNode = root.appendNode('licenses').appendNode('license')
    licenseNode.appendNode('name', 'The Apache License, Version 2.0')
    licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
    licenseNode.appendNode('distribution', 'repo')

    def scmNode = root.appendNode('scm')
    scmNode.appendNode('url', 'https://github.com/hyperswitch/hyperswitch-sdk-android')
    scmNode.appendNode('connection', 'scm:git:git://github.com/juspay/hyperswitch-sdk-android.git')
    scmNode.appendNode('developerConnection', 'scm:git:ssh://git@github.com:juspay/hyperswitch-sdk-android.git')
    scmNode.appendNode('tag', 'HEAD')

    def developerNode = root.appendNode('developers').appendNode('developer')
    developerNode.appendNode('id', 'sh-iv-am')
    developerNode.appendNode('name', 'Shivam')
    developerNode.appendNode('email', 'shivam.shashank@juspay.in')
}

subprojects {

    def disableTaskIfPresent = { taskPath ->
        def task = tasks.findByPath(taskPath)
        if (task) task.enabled = false
    }

    disableTaskIfPresent(':react-native-klarna-inapp-sdk:compileDebugUnitTestJavaWithJavac')
    disableTaskIfPresent(':react-native-klarna-inapp-sdk:compileReleaseUnitTestJavaWithJavac')
    // disableTaskIfPresent(':react-native-klarna-inapp-sdk:testReleaseUnitTest')
    // disableTaskIfPresent(':react-native-hyperswitch-paypal:lintDebug')

    def isAppProject = project.name == 'app'
    def isLiteProject = project.name == 'hyperswitch-sdk-android-lite'
    def pomVersion = isAppProject ? project.version : (isLiteProject ? liteVersion : extVersion)

    def configurePom = { pom ->
        def root = pom.asNode()
        configurePomMetadata(root)

        def dependencies = root.appendNode('dependencies')
        configurations.getByName('releaseCompileClasspath').getResolvedConfiguration().getFirstLevelModuleDependencies().each {
            if (!runtimeDepsOptional.contains(it.moduleName)) {
                def isLiteProjectSub = it.moduleName == 'hyperswitch-sdk-android-lite'
                def dependency = dependencies.appendNode('dependency')
                dependency.appendNode('groupId', it.moduleGroup)
                dependency.appendNode('artifactId', it.moduleName)
                dependency.appendNode('version', (runtimeDeps.contains(it.moduleName) ? extVersion : (isLiteProjectSub ? liteVersion : it.moduleVersion)))
            }
        }
    }

    publishing {
        publications {
            if (!runtimeDepsExcluded.contains(project.name)) {
                "$project.name"(MavenPublication) {
                    groupId = project.group
                    artifactId = isAppProject ? 'hyperswitch-sdk-android' : project.name
                    version = pomVersion
                    artifact "$buildDir/outputs/aar/$project.name-release.aar"
                    pom.withXml(configurePom)
                }
            }
        }
        repositories {
            maven {
                url("${project.rootDir}/maven")
            }
        }
    }

//    signing {
//        sign publishing.publications
//    }
}
